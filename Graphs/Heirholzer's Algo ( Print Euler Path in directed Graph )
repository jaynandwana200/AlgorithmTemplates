// Given Edges as pairs in code and nodes need not be from (0 - n-1)
//Outputs path in form of Edges taken or order in which Edges were taken
void dfs(unordered_map<int,vector<int>>&mp,int start,vector<int> &ans){
        while(!mp[start].empty()){
            int itr = mp[start].back();
            mp[start].pop_back();
            dfs(mp,itr,ans);
        }
    ans.push_back(start);
}
vector<vector<int>> heirholzerAlgo(vector<vector<int>>& pairs) {
        unordered_map<int,vector<int>>mp;
        unordered_map<int,int>indegree;
        unordered_map<int,int>outdegree;
        for(auto itr : pairs){
            mp[itr[0]].push_back(itr[1]);
            indegree[itr[1]]++;
            outdegree[itr[0]]++;
        }
        int start = pairs[0][0];
        for(auto itr : mp){
            if(outdegree[itr.first] - indegree[itr.first] == 1){
                start = itr.first;
                break;
            }
        }
        vector<int> ans;
        dfs(mp,start,ans);
        vector<vector<int>> finalAns;
        reverse(ans.begin(),ans.end());
        for(int i = 0;i < ans.size()-1;i++){
            finalAns.push_back({ans[i],ans[i+1]});
        }
        return finalAns;
    }
